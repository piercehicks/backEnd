/////
Exercises
/////

1. What are some pros and cons of using linked lists instead of arrays?
    a. Pros: Save on data expenses by not needing to rearrange the physical
       memory space to make room
    b. Cons: Less efficient to access an element in a list than a array, speed-wise

2. Real-World Example
   a. A real-world example would be file folders on your computer. While not
      necessarily all in a certain order each file folder name informs
      you where a file/element may be.

/////
Programming Questions
/////

//Question 1
// A.) explanation of the bug: The function is setting current node to head when
      there is already a head, making 2 head nodes.
//B.) functional implementation of the method: See below

LinkedList.prototype.push = function(val){
    let node = {
       value: val,
       next: null
    }

    if(!this.head){
      this.head = node;
      this.length += 1;
      return node;
    }
    else{
      current = this.head;

      while(current.next){
        current = current.next;
      }

      current.next = node;
      this.length += 1;
      return node;
    }
  }



//Question 2
 //Given an unsorted singly linked list, remove all duplicates from the linked list.
//Example
//Input: a -> c -> d -> d -> a
//Output: a -> c -> d

class Node {
  constructor(value){
    this.value = value,
    this.next = null;

  }
}

class SinglyLinkList {
  constructor(){
    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  push(val){
    let newNode = new Node(val);
    if(!this.head) {
      this.head = newNode;
      this.tail = newNode;
    } else {
      this.tail.next = newNode;
      this.tail = newNode;
    }
    this.length++;
    return this;
  }
// duplicate doesn't work yet
duplicate(){
  if (!this.head || !this.head.next) {
      console.log("no duplicates");
      return;
  }

    var thisNode = this.head;
    while (thisNode != null) {
      var previousNode = thisNode;
      var nextNode = thisNode.next;
      while (nextNode != null) {
        if (thisNode.value == nextNode.value) {
          previousNode.next = nextNode.next;
          this.length --;
        } else {
          previousNode = nextNode;
        }
        nextNode = nextNode.next;
      }
      thisNode = thisNode.next;
    }
    return this;
}



}

let list = new SinglyLinkList;
list.push("a");
list.push("c");
list.push("d");
list.push("d");
list.push("a");
list.duplicate();
console.log(list);



//Question 3
//Given an unsorted singly linked list, //reverse it.
//Example
//Input: a -> b -> c -> d
//Output: d -> c -> b -> a

class Node {
  // for creation of node
  constructor(value){
    this.value = value,
    this.next = null;
    // when we init we want it to be null
  }
}

class SinglyLinkList {
  constructor(){
    // init state of list
    this.head = null;
    this.tail = null;
    this.length = 0;
  }
// add node to list
  push(val){
    let newNode = new Node(val);
    if(!this.head) {
      // if no head a.k.a empty
      this.head = newNode;
      this.tail = newNode;
    } else {
      // if it has a head..
      this.tail.next = newNode;
      this.tail = newNode;
    }
    this.length++;
    return this;
  }

  reverse(){
  if(!this.head) return false;
  let node = this.head;
  this.head = this.tail;
  // makes head tail
  this.tail = node;

  let prev = null;
  let next;

  for(let i = 0; i < this.length; i++){
    next      = node.next;
    node.next = prev;
    prev      = node;
    node      = next;
  }
  return true;
}
}

let list = new SinglyLinkList;
list.push("a");
list.push("b");
list.push("c");
list.push("d");
list.reverse();
console.log(list);
