1.Define and compare recursion and iteration.

- Recursion is the technique when a function calls itself with parameters moving
forward based off base cases. That's the article definition. My plain english
definition is a function which calls itself.

- Iteration is when a function calls itself and repeats a certain number of times.

- Recursive solutions run slower than iterative ones. The flip side of that is
iterative ones are at times harder to implement

////////////////////////////////////////////////////////////////////////////////////////

2. Name five algorithms that are commonly implemented by recursion.

1. Factorial of number
2. Greatest common divisor
3. Fibonnacci numbers
4. Recursive binary searches
5. Linked List

Source: Quora


////////////////////////////////////////////////////////////////////////////////////////
3. When should you use recursion, and when should you avoid recursion? Give examples for each.

- When to use recursion? When a algorithm can be defined as a combination of sub-results
starting with known cases. EX: Finding a common divisor
- When not to use recursion? Algorithms that loop through a data set. EX: Fibonnacci sequences

////////////////////////////////////////////////////////////////////////////////////////
4. Compare the recursive and iterative solutions to the three algorithms from the
checkpoint (factorial, maximum, and fibonacci). What is similar, and what is different?

Similarly, they both can be used to achieve the same result just with different
degrees of difficulty/ease of use. The difference I see
is the recursive solutions seem easier to read.

////////////////////////////////////////////////////////////////////////////////////////
5. Given a multi-dimensional collection (such as an array) where the number of
dimensions is unknown, write a recursive algorithm to count the number of
items in the entire collection.

let calculateArray = (array)=>{
      let counter =0;

   for (let i=0; i <array.length; i++){

     if (typeof array[i] === "object"){

         counter += calculateArray(array[i]);
     }else{
       counter++;
     }
   }
    return counter;
}

console.log(calculateArray([1,2,3,]));

////////////////////////////////////////////////////////////////////////////////////////
6. A palindrome is a word or phrase whose spelling is the same either direction
(e.g., racecar). Write a recursive algorithm to determine if a given word or phrase is a palindrome.


let isPalindrome= (str)=>{

   if(str.length === 0){
     return true;
  }
   if (str[0] !== str[str.length-1]){
     return false;
   }
  return isPalindrome(str.slice(1,str.length-1));
};

 console.log(isPalindrome("eye"));

////////////////////////////////////////////////////////////////////////////////////////
7. Google Easter Egg: Google the term "recursion". Google will prompt you with
"Did you mean: recursion". Explain why this behavior exhibits properties of recursion.

It exhibits properties of recursion by calling itself over and over
("Did you mean: recursion") and the definition states "the repeated application
of a recursive procedure or definition." A.K.A repeating itself
