//////
EXERCISES
//////

1.) What is the main difference between a stack and a queue?
Answer: The key difference is a stack is last or task in first out,
        while a queue is first in first out like server request.

2.) What are the similarities between stacks and queues?
Answer: Both are priority list used by developers designed to efficiently
        organize data in  particular order.

3.) Imagine you are an engineer tasked with implementing the UNDO and
    REDO options in a word processor such as Microsoft Word. Which data
    structure would you use for each option and why?
Answer:
-  Well for UNDO you want to use LIFO/stack, because I want to remove
  the most recent addition. Last (addition) in first (addition out).
- For REDO I want to add FIFO because I'm adding back the first item I
  removed.

///////
Programming Questions
//////
1.) Given a string, reverse it using a stack. For example, the string "Bloc!"
    should be converted to "!colB".

    let phrase = "Bloc!";

function reversePhrase(){
let reversed = "";
for (let i = phrase.length - 1; i >= 0; i--) {
  reversed += phrase[i];
}
return reversed;
}

console.log(reversePhrase(phrase));

///
Additional Programming Question
///

 2.) Implement the pop method of a stack using one queue. Make a FIFO data
    structure mirror the functionality of a LIFO data structure.
    Since the internal list is not the same as defined in the checkpoint,
    it may help to rewrite the pseudocode first.

1.) Implement the enqueue and dequeue methods defined in the checkpoint inside
    your own Queue class.


/////
Answer
https://codepen.io/piercehicks/pen/ZPzwoa
////

function Queue () {
    collection = [];
    this.print = function() {
        console.log(collection);
    };
    this.enqueue = function(element) {
        collection.push(element);
    };
    this.dequeue = function() {
        return collection.shift();
    };

}

let que = new Queue();
que.enqueue('linePosition1');
que.enqueue('linePosition2');
que.enqueue('linePosition3');
que.print();
que.dequeue();
que.dequeue();
que.print();
